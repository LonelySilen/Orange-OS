开发中遇到的问题：
1.引导代码要写到磁盘63扇区（操作系统DPR），而不是0扇区（MBR），虽然0扇区可以引导，但是在windows下不能识别，导致后续拷贝文件变得艰难
后发现之前某个字节偏移错误导致，写入MBR也是可以的,但不是所有机器都能认
2.在ubuntu下格式化u盘后mbr丢失，用diskgenius重新格式化，然后加入DOS启动就可以了，写入63扇区是比较通用的做法
(注意：如果U盘大白菜之类的工具使用后，要重新用diskgenius格式化，然后重新用winhex读取63的数据，再修改FAT32BPB)
引导过程猜测：
系统加电先执行BIOS，自检，初始化，将控制权交给MBR，若结尾是0x55AA则表明是MBR，执行其中第一条代码(jmp指令)，随后跳转到MBR主引导代码，主引导代码进行一系列初始化操作后根据分区表将执行权依次交给个分区的引导区，引导区负责引导操作系统
MBR是公共引导代码，不夹带操作系统性质

2.于渊的书中实现的是fat12文件系统，由于fat12的fat项占12位，有可能跨区，fat32不会跨扇区，故不会这么麻烦，同时fat12在寻找扇区时使用了CHS方式，改为fat32时发现16位的除法指令会溢出而导致程序卡死，换为32位除法时想到使用LBA方式读取扇区，由于写错寄存器导致一直找不到问题

3.大体成功后发现小于一个扇区的loader可以正常执行，而大于的往往会崩溃，检查程序发现程序没有修改彻底，fat12中是按照扇区为单位管理fat项的，而fat32中每个fat项代表的是一个簇，原程序中只读了一个扇区，意味着每个簇只读了第一个扇区，这样执行到512字节边界的时候下一扇区的内容并没有读到内存导致异常。修正这个错误后，发现读取到的超过一个簇的文件出问题，原因是内存的增量定义成了宏，而在使用的时候却加了方括号，结果变成了宏所指的地址的内存内容导致错误

4.fat32相关知识总结：
(1)文件系统标识符，以及容量等信息不在MBR中，而在分区的BPB中
(2)FAT32分区结构：


引导扇区	其余保留扇区	 	FAT1 	FAT2(重复的) 	根文件夹首簇 	其他文件夹及所有文件 	剩余扇区 
 1扇区 		  31个扇区	 实际情况取大小    同FAT1 	    第2簇 　 				不足一簇 
┗━━━保留扇区━━━━━┛ 　 　 				┗━━━━━━━━数据区━━━━━━━━┛ 


读取FAT扇区的一般方法总结：
1.先根据BPB找到根文件夹首簇所在扇区号，就是文件目录存放的扇区，读出扇区内容
2.目录扇区中一个目录项是4个字节32位，查询各个项偏移0x0~0x7的文件名，寻找文件。
3.找到文件名对应的条目后，读取偏移0x1A(文件内容起始簇号低16位)以及0x14（文件起始簇号高16位），合成文件内容首簇的簇号
4.根据簇号算出文件所在扇区，取出数据，内存偏移加4096
5.然后去FAT表里查该簇号对应的偏移（FAT32用四个字节表示，第0簇F8 FF FF FF是开始标志，第一簇不用，第二簇就是文件内容首簇，），取出下一簇的簇号（FAT项）
6.根据取出的簇号计算扇区，读出内容，内存加4096...直到取出的下一簇的簇号为0x0ffffffff表明文件结束，至此一个文件完整读出


5.利用黑苹果工具探测得知A卡VESA分辨率排列模式和N/I卡有区别，32位真彩色位于不同的位置

6.关机与重启
关机：	MOV AX,2001H
	MOV DX,1004H
	OUT DX,AX (实体机测试失败)
重启：
	mov al,0feh;
	out 64h,al;
7.之前页表只映射了物理内存大小的空间，由于VESA通常将显存映射到物理内存之外，缺少页表导致#PF错误