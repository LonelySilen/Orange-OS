运行流程

boot:

LABEL_START:
1.初始化所有段寄存器为代码段寄存器
2.清屏
3.硬盘复位
4.调用DispStr函数显示"Booting."字符串
5.按照FAT32文件系统，读取Loader的所有文件簇，并加载到指定内存地址
6.文件读取成功，显示"Ready."字符串
7.跳入加载的内存地址，进入Loader执行

loader:

刚开始先设置x86处理器保护模式运行环境，设置段描述符，GDT，段选择子等数据结构
LABEL_START:
1.初始化所有段寄存器为代码段寄存器，设置堆栈寄存器
2.显示字符串"Loading."
3.调用BIOS函数获得内存数
4.按照FAT32文件系统，读取Kernel的所有文件簇，并加载到指定内存地址
5.文件读取成功，显示"Ready."字符串
6.清屏，显示分辨率选择菜单
7.等待读取键盘
8.按照按键调用VESA标准设置分辨率
9.调用VESA功能，获得分辨率，以及显存的线性地址等参数，存入BootParam这个数据结构
10.加载GDT,跳入保护模式
11.设置段选择子
12.启动分页机制
13.按照ELF格式重新安排内核
14.记录内核大小和内核内存地址
15.跳转至内核

kernel.asm
1.保存原来GDT
2.初始化描述符
	InitDscpt.c
	1.将Loader中的GDT复制到内核里
	2.填充GDT中的TSS描述符
	3.根据进程表填充LDT描述符(Process.c)
	4.设置异常和中断的中断描述符IDT(Exception.asm Exception.c Interruption.asm Interruption.c SystemCall.asm)
	5.中断处理函数绑定到中断优先级(8253除外)
	6.初始化8253 8259A 芯片（Init8253.c Init8259A.asm）
	7.初始化PCB
	8.打开8253中断，任务开始执行
